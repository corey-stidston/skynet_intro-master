Welcome to SkyNet
=================

Problems with Part1:

- Protection against Replay Attacks

	"You really shouldn't be using timestamp.

	In practice, this is difficult to do properly:

	Need to account for timezone correctly especially during the session init
	The times on the machine need to be synced correctly
	Account for latency (which you did by having a window)
	But, you could still have a window for replay attacks
	However, you protected your timestamp so that makes this whole situation better.

	(-0.5)

	What you want to do is to use a stream of unpredictable counters.
	i.e. seed a cryptographically secure pseudorandom number generator with some unused shared_secret and increment the counter by the next random value you get from it."



Usage: Peer to Peer (Echo)
(Note: Requires two bots at the same time)
==========================
smerity@pegasus:~/usyd/elec5616_proj/framework$ python3.2 bot.py
Listening on port 1337
Waiting for connection...
Enter command: p2p echo
Finding another bot...
Found bot on port 1338
Shared hash: c2bd47c3ac55f104c052dca02eaa6c9de22e7637370584e5d2ba3c9c81bf2ab8
Original data: b'ECHO'
Encrypted data: b'!qpz'
Sending packet of length 4
Echo> Test
Original data: b'Test'
Encrypted data: b'0WKA'
Sending packet of length 4
Receiving packet of length 4
Encrypted data: b'0WKA'
Original data: b'Test'
Echo> exit
Original data: b'exit'
Encrypted data: b'\x01JQA'
Sending packet of length 4
Receiving packet of length 4
Encrypted data: b'\x01JQA'
Original data: b'exit'

Notice: 'Test' and 'exit' are sent and received as the same encrypted message.
This means it's vulnerable to frequency analysis. When 'a' is sent multiple times,
it ends up "looping" as we're using a simple repeated XOR cypher.
This is something that should be fixed.
